package com.jinan.Utils;

import com.jinan.service.Voter.VoteService;
import io.netty.channel.Channel;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.SimpleChannelInboundHandler;
import io.netty.channel.group.ChannelGroup;
import io.netty.channel.group.DefaultChannelGroup;
import io.netty.util.concurrent.GlobalEventExecutor;
import lombok.extern.slf4j.Slf4j;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandler.Sharable;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import io.netty.handler.codec.http.websocketx.WebSocketCloseStatus;
import io.netty.handler.codec.http.websocketx.WebSocketFrame;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * WebSocket 处理器
 *
 * @author CH
 */
@Slf4j
@Sharable
@Component
public class WebsocketHandler extends SimpleChannelInboundHandler<WebSocketFrame> {

    private static final Logger LOGGER = LoggerFactory.getLogger(WebsocketHandler.class);

    // 使用 ChannelGroup 存储所有连接的 Channel
    private static final ChannelGroup channels = new DefaultChannelGroup(GlobalEventExecutor.INSTANCE);

    // 使用 ConcurrentHashMap 存储用户名和对应的 Channel
    private static final ConcurrentHashMap<String, Channel> userChannels = new ConcurrentHashMap<>();

    @Autowired
    private VoteService voteService;

    @Override
    protected void channelRead0(ChannelHandlerContext ctx, WebSocketFrame msg) throws Exception {   // 接收到消息后会执行
        if (msg instanceof TextWebSocketFrame) {
            TextWebSocketFrame textWebSocketFrame = (TextWebSocketFrame) msg;
            String request = textWebSocketFrame.text();
            log.info("数据处理到了 WebsocketHandler " + ctx + "  msg = " + request);

            // 解析消息格式，例如 "to:username:message"
            String[] parts = request.split(":");
            if (parts.length == 3 && "to".equals(parts[0])) {
                String toUsername = parts[1];
                String message = parts[2];

                // 查找目标用户的 Channel
                Channel targetChannel = userChannels.get(toUsername);
                if (targetChannel != null) {
                    targetChannel.writeAndFlush(new TextWebSocketFrame("From " + getUsername(ctx.channel()) + ": " + message));
                } else {
                    ctx.channel().writeAndFlush(new TextWebSocketFrame("User " + toUsername + " not found"));
                }
            } else {
                // 如果消息格式不符合预期，广播给所有客户端
                broadcastMessage("From " + getUsername(ctx.channel()) + ": " + request);
            }

            // 业务层处理数据
            this.voteService.getVoteById(1);

            // 响应客户端
            ctx.channel().writeAndFlush(new TextWebSocketFrame("我收到了你的消息：" + request + System.currentTimeMillis()));
        } else {
            // 不接受文本以外的数据帧类型
            ctx.channel().writeAndFlush(WebSocketCloseStatus.INVALID_MESSAGE_TYPE).addListener(ChannelFutureListener.CLOSE);
        }
    }

    @Override
    public void handlerAdded(ChannelHandlerContext ctx) throws Exception {
        // 假设客户端连接时发送的第一个消息是用户名
        ctx.channel().read();
        ctx.channel().writeAndFlush(new TextWebSocketFrame("Please send your username"));
    }

    @Override
    public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
        ctx.flush();
    }

    @Override
    public void channelActive(ChannelHandlerContext ctx) throws Exception {
        super.channelActive(ctx);
        LOGGER.info("链接创建：{}", ctx.channel().remoteAddress());
        channels.add(ctx.channel());
    }

    @Override
    public void channelInactive(ChannelHandlerContext ctx) throws Exception {
        super.channelInactive(ctx);
        LOGGER.info("链接断开：{}", ctx.channel().remoteAddress());
        channels.remove(ctx.channel());

        String username = getUsername(ctx.channel());
        if (username != null) {
            userChannels.remove(username);
            LOGGER.info("User {} disconnected", username);
        }
    }

    @Override
    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
        cause.printStackTrace();
        ctx.close();
    }

    // 设置用户名和对应的 Channel
    public void setUserName(Channel channel, String username) {
        userChannels.put(username, channel);
    }

    // 获取 Channel 对应的用户名
    public String getUsername(Channel channel) {
        for (Map.Entry<String, Channel> entry : userChannels.entrySet()) {
            if (entry.getValue() == channel) {
                return entry.getKey();
            }
        }
        return null;
    }

    // 向特定用户发送消息
    public void sendMessageToUser(String username, String message) {
        Channel targetChannel = userChannels.get(username);
        if (targetChannel != null) {
            targetChannel.writeAndFlush(new TextWebSocketFrame(message));
        } else {
            LOGGER.info("User {} not found", username);
        }
    }

    // 广播消息给所有客户端
    private void broadcastMessage(String message) {
        channels.writeAndFlush(new TextWebSocketFrame(message));
    }
}


















































package com.jinan.Configuration;

import java.net.InetSocketAddress;

import com.jinan.Utils.WebsocketHandler;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextClosedEvent;
import org.springframework.stereotype.Component;

import io.netty.bootstrap.ServerBootstrap;
import io.netty.channel.Channel;
import io.netty.channel.ChannelFutureListener;
import io.netty.channel.ChannelHandlerContext;
import io.netty.channel.ChannelInboundHandlerAdapter;
import io.netty.channel.ChannelInitializer;
import io.netty.channel.ChannelPipeline;
import io.netty.channel.EventLoopGroup;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.SocketChannel;
import io.netty.channel.socket.nio.NioServerSocketChannel;
import io.netty.handler.codec.http.DefaultFullHttpResponse;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.handler.codec.http.HttpServerCodec;
import io.netty.handler.codec.http.HttpVersion;
import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;
import io.netty.handler.codec.http.websocketx.extensions.compression.WebSocketServerCompressionHandler;
import io.netty.handler.stream.ChunkedWriteHandler;

/**
 * 初始化Netty服务
 * @author CH
 */
@Component
public class NettyConfig implements ApplicationRunner, ApplicationListener<ContextClosedEvent>, ApplicationContextAware {

    private static final Logger LOGGER = LoggerFactory.getLogger(NettyConfig.class);

    @Value("${netty.websocket.port}")
    private int port;

    @Value("${netty.websocket.ip}")
    private String ip;

    @Value("${netty.websocket.path}")
    private String path;

    @Value("${netty.websocket.max-frame-size}")
    private long maxFrameSize;

    private ApplicationContext applicationContext;

    private Channel serverChannel;

    @Override
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
        this.applicationContext = applicationContext;
    }

    @Override
    public void run(ApplicationArguments args) throws Exception {
        EventLoopGroup bossGroup = new NioEventLoopGroup();
        EventLoopGroup workerGroup = new NioEventLoopGroup();
        try {
            ServerBootstrap serverBootstrap = new ServerBootstrap();
            serverBootstrap.group(bossGroup, workerGroup);                      // 父Group与子Group
            serverBootstrap.channel(NioServerSocketChannel.class);
            serverBootstrap.localAddress(new InetSocketAddress(this.ip, this.port));
            serverBootstrap.childHandler(new ChannelInitializer<SocketChannel>() {
                @Override
                protected void initChannel(SocketChannel socketChannel) throws Exception {  // 业务逻辑处理器
                    ChannelPipeline pipeline = socketChannel.pipeline();
                    pipeline.addLast(new HttpServerCodec());                  // HTTP 编解码器
                    pipeline.addLast(new ChunkedWriteHandler());              // 支持大文件传输
                    pipeline.addLast(new HttpObjectAggregator(65536));        // 聚合 HTTP 消息
                    pipeline.addLast(new ChannelInboundHandlerAdapter() {
                        @Override
                        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
                            if (msg instanceof FullHttpRequest) {
                                FullHttpRequest fullHttpRequest = (FullHttpRequest) msg;
                                String uri = fullHttpRequest.uri();
                                if (!uri.equals(path)) {
                                    // 访问的路径不是 WebSocket 的端点地址，响应404
                                    ctx.channel().writeAndFlush(new DefaultFullHttpResponse(HttpVersion.HTTP_1_1, HttpResponseStatus.NOT_FOUND))
                                            .addListener(ChannelFutureListener.CLOSE);
                                    return;
                                }
                            }
                            super.channelRead(ctx, msg);
                        }
                    });
                    pipeline.addLast(new WebSocketServerCompressionHandler()); // WebSocket 压缩处理器
                    pipeline.addLast(new WebSocketServerProtocolHandler(path, null, true, maxFrameSize)); // WebSocket 协议处理器

                    /**
                     * 从 IOC 中获取到 Handler
                     */
                    pipeline.addLast(applicationContext.getBean(WebsocketHandler.class));
                }
            });
            Channel channel = serverBootstrap.bind().sync().channel();      // bind() 绑定端口 sync同步操作，保证绑定完才继续往下走
            this.serverChannel = channel;
            LOGGER.info("websocket 服务启动，ip={}, port={}", this.ip, this.port);
            channel.closeFuture().sync();       // 等待监听关闭的信号
        } finally {
            bossGroup.shutdownGracefully();
            workerGroup.shutdownGracefully();
        }
    }

    @Override
    public void onApplicationEvent(ContextClosedEvent event) {
        if (this.serverChannel != null) {
            this.serverChannel.close();
        }
        LOGGER.info("websocket 服务停止");
    }
}